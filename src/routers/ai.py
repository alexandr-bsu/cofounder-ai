import asyncio
from uuid import uuid4
from fastapi import APIRouter, BackgroundTasks
from src.schemas import ConversationHistoryMessage, DirectMessageRequest, LLMRequest, InitConverastionRequest, UserMessageRequest, BackToBotRequest
from src.services import history_service
from src.services.llm_service import llm
from src.services.history_service import HistoryService
from src.utils import transorm_history_to_llm_format, tansform_files_to_context, transform_markdown_to_telegram_html, split_html_text_for_telegram, map_step_name_to_step_id
import re
from src.services.target_hunter_service import TargetHunterService
import random

router = APIRouter(prefix='/ai')

path_map = {
    'list_communities': 'docs/list_communities.csv',
    'questions': 'docs/questions.csv',
    'professional_community_page': 'docs/professional_community.txt',
    'hypothesis': 'docs/hypothesis.txt',
    'product': 'docs/product.txt',
    'client_offer': 'docs/client_offer.txt',
    'custdev': 'docs/custdev.txt',
    'cofounder_offer': 'docs/cofounder_offer.txt',
    'business_model': 'docs/business_model.txt'
}


async def add_message_to_conversation_background(message: ConversationHistoryMessage):
    hs = await HistoryService()
    await hs.add_message_to_conversation_history(message)


async def init_conversation_background(request: InitConverastionRequest):
    hs = await HistoryService()
    ths = await TargetHunterService()

    conversation_id = str(uuid4())

    ai_response = await ask(LLMRequest(topic=request.topic, profile_id=request.profile_id))
    await hs.add_message_to_conversation_history(ConversationHistoryMessage(topic=request.topic, message=ai_response['instructions_with_context'][0]['content'], conversation_id=conversation_id, role=ai_response['instructions_with_context'][0]['role'], profile_id=request.profile_id))
    await hs.add_message_to_conversation_history(ConversationHistoryMessage(topic=request.topic, message=ai_response['instructions_with_context'][1]['content'], conversation_id=conversation_id, role=ai_response['instructions_with_context'][1]['role'], profile_id=request.profile_id))
    await hs.add_message_to_conversation_history(ConversationHistoryMessage(topic=request.topic, message=ai_response['content'], conversation_id=conversation_id, role='assistant', profile_id=request.profile_id))

    # –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ telegram
    telegram_chuncks = ai_response['content_telegram_chunks']

    for chunk in telegram_chuncks:
        await ths.go_to_step(
            step_id='68be7106d0dbaa14e10c8be3',
            uid=request.uid,
            payload={
                "response": {
                    "text": chunk,
                    "conversationId": conversation_id
                }
            }
        )
        await asyncio.sleep(1)

    return telegram_chuncks


async def process_conversation_background(request: UserMessageRequest):
    hs = await HistoryService()
    ths = await TargetHunterService()
    ai_response = await ask(LLMRequest(topic=request.topic, profile_id=request.profile_id, prompt=request.message))

    await hs.add_message_to_conversation_history(ConversationHistoryMessage(topic=request.topic, message=request.message, conversation_id=request.conversation_id, role='user', profile_id=request.profile_id))
    await hs.add_message_to_conversation_history(ConversationHistoryMessage(topic=request.topic, message=ai_response['content'], conversation_id=request.conversation_id, role='assistant', profile_id=request.profile_id))

    # –ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ telegram
    telegram_chuncks = ai_response['content_telegram_chunks']

    for chunk in telegram_chuncks:
        await ths.go_to_step(
            step_id='68afe458915d25156227c07f',
            uid=request.uid,
            payload={
                "response": {
                    "text": chunk,
                    "conversationId": request.conversation_id
                }
            }
        )
        await asyncio.sleep(1)

    return telegram_chuncks


@router.post('/addMessageToConversationHistory', status_code=201)
async def add_message_to_conversation_history(message: ConversationHistoryMessage, background_tasks: BackgroundTasks):
    background_tasks.add_task(add_message_to_conversation_background, message)
    return {"success": True}


@router.post('/initConversation', status_code=200)
async def init_conversation(request: InitConverastionRequest, background_tasks: BackgroundTasks):
    background_tasks.add_task(init_conversation_background, request)
    return {"succes": True}


@router.post('/processConversation', status_code=200)
async def init_conversation(request: UserMessageRequest, background_tasks: BackgroundTasks):
    background_tasks.add_task(process_conversation_background, request)
    return {"succes": True}

# TODO add extract entities api


@router.post('/parseEntities', status_code=202)
async def parse_entities():
    return {"succes": True}

# TODO add save extracted entities api


@router.post('/saveEntities', status_code=202)
async def save_entities():
    return {"succes": True}


async def transfer_back_to_bot_mode_background(request: BackToBotRequest):
    step_map = {
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏': map_step_name_to_step_id('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã': map_step_name_to_step_id('–ë–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª—å'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª–∏': map_step_name_to_step_id('–û—Ñ—Ñ–µ—Ä'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞': map_step_name_to_step_id('–ú–∞—Ä—à—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Ñ—Ñ–µ—Ä—É'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ CustDev': map_step_name_to_step_id('–ú–∞—Ä—à—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Ñ—Ñ–µ—Ä—É'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞': map_step_name_to_step_id('–ú–∞—Ä—à—É—Ç–∏–∑–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –æ—Ñ—Ñ–µ—Ä—É'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –∫–æ—Ñ–∞—É–Ω–¥–µ—Ä–∞': map_step_name_to_step_id('–ö–æ–º–∞–Ω–¥–∞'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –∫–æ—Ñ–∞—É–Ω–¥–µ—Ä–∞ (–±–µ–∑ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π)': '68b01fae13001b42b560dda1',
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ (–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ò–ò)': map_step_name_to_step_id('–ü–∞–Ω–µ–ª—å –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–∏–ø–æ—Ç–µ–∑—ã (–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ò–ò)': map_step_name_to_step_id('–ü–∞–Ω–µ–ª—å –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å –º–æ–¥–µ–ª–∏ (–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ò–ò)': map_step_name_to_step_id('–ü–∞–Ω–µ–ª—å –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ (–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ò–ò)': map_step_name_to_step_id('–ü–∞–Ω–µ–ª—å –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–∞ CustDev (–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ò–ò)': map_step_name_to_step_id('–ü–∞–Ω–µ–ª—å –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ò–ò)': map_step_name_to_step_id('–ü–∞–Ω–µ–ª—å –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'),
        '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è –∫–æ—Ñ–∞—É–Ω–¥–µ—Ä–∞ (–ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –ò–ò)': map_step_name_to_step_id('–ü–∞–Ω–µ–ª—å –ò–ò –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤')
    }

    ths = await TargetHunterService()
    await ths.go_to_step(step_id=step_map[request.topic], uid=request.uid)


@router.post('/transferBackToBotMode', status_code=200)
async def transfer_back_to_bot_mode(request: BackToBotRequest, background_tasks: BackgroundTasks):
    background_tasks.add_task(transfer_back_to_bot_mode_background, request)
    return {"succes": True}


async def write_direct_message_background(request: DirectMessageRequest):
    conversation_id = str(uuid4())
    hs = await HistoryService()

    system_instruction = await hs.get_instructions(request.topic)
    await hs.add_message_to_conversation_history(ConversationHistoryMessage(topic=request.topic, message=system_instruction['message'], conversation_id=conversation_id, role='system', profile_id=request.profile_id))
    await hs.add_message_to_conversation_history(ConversationHistoryMessage(topic=request.topic, message=request.message, conversation_id=conversation_id, role='user', profile_id=request.profile_id))
    await hs.add_message_to_conversation_history(ConversationHistoryMessage(topic=request.topic, message='–°–ø–∞—Å–∏–±–æ. –Ø –∑–∞–ø–∏—Å–∞–ª –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã', conversation_id=conversation_id, role='assistant', profile_id=request.profile_id))


@router.post('/writeDirectMessage', status_code=200)
async def write_direct_message(request: DirectMessageRequest, background_tasks: BackgroundTasks):
    background_tasks.add_task(write_direct_message_background, request)
    return {"succes": True}


@router.get('/genRandomWaitMessage')
async def gen_random_wait_message():
    wait_messages = [
        'üß† –ò–ò –≤–∫–ª—é—á–∏–ª —Ä–µ–∂–∏–º ‚Äú–≥–µ–Ω–∏—è –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö‚Äù‚Ä¶',
        'üß† –ò–ò –≤–∫–ª—é—á–∏–ª –º–æ–∑–≥–∏. –®—É–º—è—Ç, –≥—Ä–µ—é—Ç—Å—è, –Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç.',
        'üì¨ –ó–∞–ø—Ä–æ—Å –≤ –æ—á–µ—Ä–µ–¥–∏. –ò–ò —Å–æ–æ–±—â–∏–ª: ‚Äú–°–µ–π—á–∞—Å, —Ç–æ–ª—å–∫–æ —ç—Ç–æ –¥–æ–¥–µ–ª–∞—é‚Ä¶‚Äù',
        'üßã –ò–ò —Å–¥–µ–ª–∞–ª –≥–ª–æ—Ç–æ–∫ –∫–æ—Ñ–µ –∏ –Ω–∞—á–∞–ª –¥—É–º–∞—Ç—å‚Ä¶',
        'üõ†Ô∏è –ò–ò —á–µ—à–µ—Ç –∑–∞—Ç—ã–ª–æ–∫. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥‚Ä¶',
        'üìà –ò–ò —Å—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫ –æ—Ç–≤–µ—Ç–∞. –û—Å—å X ‚Äî ‚Äú–≥–µ–Ω–∏–∞–ª—å–Ω–æ—Å—Ç—å‚Äù , –æ—Å—å Y ‚Äî ‚Äú—É—Å–ø–µ—Ö‚Äù‚Ä¶',
        '‚òï –ò–ò –∂–¥—ë—Ç, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –∫–æ—Ñ–µ –≤ –≥–æ–ª–æ–≤–µ. 99%‚Ä¶',
        'üì¶ –ó–∞–ø—Ä–æ—Å –≤ —Ä–∞–±–æ—Ç–µ. –£–ø–∞–∫–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ ‚Äî –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –°–∫–æ—Ç—á –µ—Å—Ç—å, –∫–æ—Ä–æ–±–∫–∞ ‚Äî –Ω–∞ –ø–æ–¥—Ö–æ–¥–µ',
        'üöÄ –ü—Ä–∏–Ω—è–ª –∑–∞–ø—Ä–æ—Å ‚Äî —É–∂–µ —Ä–∏—Å—É—é —Å—Ö–µ–º—É –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–∞–ª—Ñ–µ—Ç–∫–µ. –°–∫–æ—Ä–æ –ø–æ–∫–∞–∂—É!',
        '‚òï –í—ã–ø–∏–ª –∫–æ—Ñ–µ ‚Äî –≤–∫–ª—é—á–∏–ª—Å—è. –°–µ–π—á–∞—Å –≤—ã–¥–∞–º –≤–∞–º –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—Ç, –∞ —á—É—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –≤—ã –∂–¥–∞–ª–∏',
    ]

    random_wait_message = wait_messages[random.randint(
        0, len(wait_messages)-1)
    ]

    return {'response':
            {'text': random_wait_message}
        }


async def ask(request: LLMRequest):
    history_service = await HistoryService()

    message_history = await transorm_history_to_llm_format(
        await history_service.get_history(
            profile_id=request.profile_id,
            init_topic=request.topic if not request.prompt else None)
    )
    system_instructions = await history_service.get_instructions(topic=request.topic)

    # –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω prompt
    if not request.prompt:
        if system_instructions:
            message_history.append({'role': 'system', 'content': tansform_files_to_context(
                system_instructions['context'], path_map=path_map)})
            message_history.append(
                {'role': 'user', 'content': system_instructions['message']})

    response = await llm.infer(query=request.prompt, history=message_history, session_id=f'{request.profile_id}:{request.topic}')

    content = response.response.choices[0].message.content

    # –ü–æ—Å—Ç–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ò–ò
    content = re.sub(r'<think>.*?</think>', '',
                     content, flags=re.DOTALL).strip()
    content_telegram_chunks = transform_markdown_to_telegram_html(content)
    content_telegram_chunks = split_html_text_for_telegram(
        content_telegram_chunks)

    return {'content': content, "content_telegram_chunks": content_telegram_chunks, 'instructions_with_context': [
        {'role': 'system', 'content': tansform_files_to_context(
            system_instructions['context'], path_map=path_map)},
        {'role': 'user', 'content': system_instructions['message']}
    ] if not request.prompt and system_instructions else []}
