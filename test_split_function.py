#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from src.utils import split_html_text_for_telegram

def test_basic_split():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    print("=== –¢–µ—Å—Ç 1: –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ ===")
    
    # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç - –Ω–µ –¥–æ–ª–∂–µ–Ω —Ä–∞–∑–¥–µ–ª—è—Ç—å—Å—è
    short_text = "<b>–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç</b>"
    result = split_html_text_for_telegram(short_text, 100)
    print(f"–ö–æ—Ä–æ—Ç–∫–∏–π —Ç–µ–∫—Å—Ç: {result}")
    assert len(result) == 1
    assert result[0] == short_text
    
    # –î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–µ–≥–æ–≤
    long_text = "–ê" * 5000
    result = split_html_text_for_telegram(long_text, 4000)
    print(f"–î–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Ç–µ–≥–æ–≤ —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(result)} —á–∞—Å—Ç–µ–π")
    assert len(result) == 2
    assert len(result[0]) <= 4000
    assert len(result[1]) <= 4000
    
    print("‚úì –ë–∞–∑–æ–≤–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")

def test_html_tags_preservation():
    """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è HTML —Ç–µ–≥–æ–≤"""
    print("=== –¢–µ—Å—Ç 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ HTML —Ç–µ–≥–æ–≤ ===")
    
    # –¢–µ–∫—Å—Ç —Å –Ω–µ–∑–∞–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–≥–∞–º–∏ –ø—Ä–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–∏
    html_text = "<b>–≠—Ç–æ –æ—á–µ–Ω—å " + "–¥–ª–∏–Ω–Ω—ã–π " * 800 + "—Ç–µ–∫—Å—Ç —Å –∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º</b>"
    result = split_html_text_for_telegram(html_text, 4000)
    
    print(f"–¢–µ–∫—Å—Ç —Å —Ç–µ–≥–∞–º–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(result)} —á–∞—Å—Ç–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–∂–¥–∞—è —á–∞—Å—Ç—å –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–µ–≥–∏
    for i, part in enumerate(result):
        print(f"–ß–∞—Å—Ç—å {i+1}: –¥–ª–∏–Ω–∞ {len(part)}")
        print(f"–ù–∞—á–∞–ª–æ: {part[:50]}...")
        print(f"–ö–æ–Ω–µ—Ü: ...{part[-50:]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–≥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã
        open_count = part.count('<b>')
        close_count = part.count('</b>')
        print(f"–û—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö <b>: {open_count}, –ó–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö </b>: {close_count}")
        assert open_count == close_count, f"–í —á–∞—Å—Ç–∏ {i+1} –Ω–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤"
    
    print("‚úì HTML —Ç–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")

def test_nested_tags():
    """–¢–µ—Å—Ç –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
    print("=== –¢–µ—Å—Ç 3: –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ ===")
    
    # –¢–µ–∫—Å—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏
    html_text = "<b><i>–≠—Ç–æ –æ—á–µ–Ω—å " + "–¥–ª–∏–Ω–Ω—ã–π " * 800 + "—Ç–µ–∫—Å—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏</i></b>"
    result = split_html_text_for_telegram(html_text, 4000)
    
    print(f"–¢–µ–∫—Å—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Ç–µ–≥–∞–º–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(result)} —á–∞—Å—Ç–µ–π")
    
    for i, part in enumerate(result):
        print(f"–ß–∞—Å—Ç—å {i+1}: –¥–ª–∏–Ω–∞ {len(part)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–≥–æ–≤
        b_open = part.count('<b>')
        b_close = part.count('</b>')
        i_open = part.count('<i>')
        i_close = part.count('</i>')
        
        print(f"<b>: {b_open}, </b>: {b_close}, <i>: {i_open}, </i>: {i_close}")
        
        assert b_open == b_close, f"–í —á–∞—Å—Ç–∏ {i+1} –Ω–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <b> —Ç–µ–≥–æ–≤"
        assert i_open == i_close, f"–í —á–∞—Å—Ç–∏ {i+1} –Ω–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <i> —Ç–µ–≥–æ–≤"
    
    print("‚úì –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")

def test_self_closing_tags():
    """–¢–µ—Å—Ç —Å–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö—Å—è —Ç–µ–≥–æ–≤"""
    print("=== –¢–µ—Å—Ç 4: –°–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏ ===")
    
    html_text = "–¢–µ–∫—Å—Ç —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º<br>—Å—Ç—Ä–æ–∫–∏ " + "–æ—á–µ–Ω—å " * 800 + "–¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç"
    result = split_html_text_for_telegram(html_text, 4000)
    
    print(f"–¢–µ–∫—Å—Ç —Å <br> —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(result)} —á–∞—Å—Ç–µ–π")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ <br> —Ç–µ–≥–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    total_br = html_text.count('<br>')
    result_br = sum(part.count('<br>') for part in result)
    
    print(f"–ò—Å—Ö–æ–¥–Ω—ã—Ö <br>: {total_br}, –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: {result_br}")
    assert total_br == result_br, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ <br> —Ç–µ–≥–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å"
    
    print("‚úì –°–∞–º–æ–∑–∞–∫—Ä—ã–≤–∞—é—â–∏–µ—Å—è —Ç–µ–≥–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")

def test_complex_example():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞"""
    print("=== –¢–µ—Å—Ç 5: –°–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä ===")
    
    html_text = f"""
    <b>–ó–∞–≥–æ–ª–æ–≤–æ–∫</b>
    <br>
    <i>–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç {"—Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è–º–∏ " * 500}</i>
    <br>
    <b><i>–í–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏ {"—Ç–æ–∂–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ " * 300}</i></b>
    <br>
    –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –∫–æ–Ω—Ü–µ
    """
    
    result = split_html_text_for_telegram(html_text, 4000)
    
    print(f"–°–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ {len(result)} —á–∞—Å—Ç–µ–π")
    
    for i, part in enumerate(result):
        print(f"\n--- –ß–∞—Å—Ç—å {i+1} (–¥–ª–∏–Ω–∞: {len(part)}) ---")
        print(f"–ù–∞—á–∞–ª–æ: {part[:100]}...")
        print(f"–ö–æ–Ω–µ—Ü: ...{part[-100:]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É
        assert len(part) <= 4000, f"–ß–∞—Å—Ç—å {i+1} –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç: {len(part)} —Å–∏–º–≤–æ–ª–æ–≤"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å —Ç–µ–≥–æ–≤
        tags_to_check = ['b', 'i']
        for tag in tags_to_check:
            open_count = part.count(f'<{tag}>')
            close_count = part.count(f'</{tag}>')
            assert open_count == close_count, f"–í —á–∞—Å—Ç–∏ {i+1} –Ω–µ—Ä–∞–≤–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ <{tag}> —Ç–µ–≥–æ–≤: {open_count} vs {close_count}"
    
    print("‚úì –°–ª–æ–∂–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ\n")

if __name__ == "__main__":
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ split_html_text_for_telegram\n")
    
    try:
        test_basic_split()
        test_html_tags_preservation()
        test_nested_tags()
        test_self_closing_tags()
        test_complex_example()
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ: {e}")
        sys.exit(1)